/*

In cpp src file we just have text a bunch of text to convert this c++ code language text into actual application 
there are two imp steps in cpp -
1. Compilation 
2. Linking

In this document we will learn cpp compilation process in much depth / for more depth revision refer 
The cherno's cpp series how compiler works video.

1. We have bunch of cpp files , this files just contains the text cpp code.

2. This individual cpp file are called as translation units for each trasalation unit
a obj file is generated by our compiler.

3. There is no significance of folder and file structure in cpp, we just need a way to give source code
to compiler and let him know which type of file it is .cpp tells that it is a cpp file.

4. For each of the translation unit the compiler generates a object file / but not if you have multiple cpp
files in your project and if you never include each other between them compiler will generate obj file for each of them
here each of them will be a translation unit. But it can be that you can also include multiple cpp files into a single one in that case we need to compile only that single gigantic cpp file then only one obj file will be generated a their is one translation unit and in this case other cpp file that are included in main file will not be called a translation unit.
SO translation unit is simply the cpp file which is translated by the compiler.

4. we can also gives the compiler .yogesh file wiith cpp src code and tells him that it contains cpp source
code then also it will works fine.

5. Now lets again comes to compilation , 

===>  the first step is preprocessing.

There are 4 imp preprocessor statements , there can be more but not so useful - 
1 #include -> copy paste the code of header files in source fie
2 #define -> give alias to any identifier or ....
3 #if -> we can give condition to the compiler whether the below code has to be executed or not
4. #endif -> just ends the #if directive.

You can see each examples in visual studio.

===> The second tokenization etc to undersantd our code and covert it into AST (abstract syntax tree)

====> The third step convert the code into machine code with the help of AST, it includes (learn compiler design in depth for this)

The process of converting src code to machine code is as follows - 

1. source code -> preprocessig -> AST -> assembly code for that arcjitecture --> machine code

2. compiler can also optimize code if we tell him to do so
for example 1. constant folding  -> converts 5*2 to 10 at  compile time
            2. remove unusable code etc

when we call a function in cpp code compiler converts it into a call assembly command





*/